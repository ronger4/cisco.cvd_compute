---
- name: Set API vars for FI Port Query
  vars:
    api_info: &api_info
      api_private_key: "{{ ucs_fi_port_query_api_private_key }}"
      api_key_id: "{{ ucs_fi_port_query_api_key_id }}"
      api_uri: "{{ ucs_fi_port_query_api_uri | default(omit) }}"
      validate_certs: "{{ ucs_fi_port_query_validate_certs | default(omit) }}"

  block:
    - name: Get Fabric Interconnect Details
      cisco.intersight.intersight_rest_api:
        <<: *api_info
        resource_path: /network/ElementSummaries
        query_params:
          $filter: "SwitchType eq 'FabricInterconnect' and (Name eq '{{ current_fi }}')"
          $top: 10
        return_list: true
      register: ucs_fi_port_query_fi_details
      delegate_to: localhost

    - name: Get Physical FC Ports for Fabric Interconnect
      cisco.intersight.intersight_rest_api:
        <<: *api_info
        resource_path: /fc/PhysicalPorts
        query_params:
          $filter: "Ancestors.Moid eq '{{ ucs_fi_port_query_fi_details.api_response[0].Moid }}'"
        return_list: true
      register: ucs_fi_port_query_fc_physical_ports
      delegate_to: localhost
      when:
        - ucs_fi_port_query_fi_details.api_response is defined
        - ucs_fi_port_query_fi_details.api_response | length > 0

    - name: Get Physical Ethernet Ports for Fabric Interconnect
      cisco.intersight.intersight_rest_api:
        <<: *api_info
        resource_path: /ether/PhysicalPorts
        query_params:
          $filter: "Ancestors.Moid eq '{{ ucs_fi_port_query_fi_details.api_response[0].Moid }}'"
        return_list: true
      register: ucs_fi_port_query_eth_physical_ports
      delegate_to: localhost
      when:
        - ucs_fi_port_query_fi_details.api_response is defined
        - ucs_fi_port_query_fi_details.api_response | length > 0
    
    - name: Initialize Port List Variables
      ansible.builtin.set_fact:
        ucs_fi_port_query_fc_ports_filtered: []
        ucs_fi_port_query_eth_ports_filtered: []
        breakout_ports: {}

    - name: Append FC Port Data
      ansible.builtin.set_fact:
        ucs_fi_port_query_fc_ports_filtered: "{{ ucs_fi_port_query_fc_ports_filtered + [ {
          'port_Id': (item.AggregatePortId != 0) | ternary(item.AggregatePortId ~ '/' ~ item.PortId, item.PortId | string),
          'aggregate_port_Id': item.AggregatePortId,
          'slot_Id': item.SlotId,
          'class_id': item.ClassId,
          'oper_state': item.OperState,
          'oper_speed': item.OperSpeed,
          'admin_state': item.AdminState,
          'switch_id': item.SwitchId,
          'port_group': item.PortGroup,
          'role': item.Role,
          'parent_port': (item.AggregatePortId != 0) | ternary(item.AggregatePortId, 'Physical Port')
          }] }}"
      loop: "{{ ucs_fi_port_query_fc_physical_ports.api_response | default([]) }}"
      when: item.PortId is defined and item.SlotId is defined

    - name: Append Ethernet Port Data
      ansible.builtin.set_fact:
        ucs_fi_port_query_eth_ports_filtered: "{{ ucs_fi_port_query_eth_ports_filtered + [ {
          'port_Id': (item.AggregatePortId != 0) | ternary(item.AggregatePortId ~ '/' ~ item.PortId, item.PortId | string),
          'aggregate_port_Id': item.AggregatePortId,
          'slot_Id': item.SlotId,
          'class_id': item.ClassId,
          'oper_state': item.OperState,
          'oper_speed': item.OperSpeed,
          'admin_state': item.AdminState,
          'switch_id': item.SwitchId,
          'port_group': item.PortGroup,
          'role': item.Role,
          'parent_port': (item.AggregatePortId != 0) | ternary(item.AggregatePortId, 'Physical Port')
          }] }}"
      loop: "{{ ucs_fi_port_query_eth_physical_ports.api_response | default([]) }}"
      when: item.PortId is defined and item.SlotId is defined

    - name: Group Breakout Ports Under Physical Ports
      ansible.builtin.set_fact:
        breakout_ports: "{{ breakout_ports | combine({ item.aggregate_port_Id: (breakout_ports[item.aggregate_port_Id] | default([])) + [item] }) }}"
      loop: "{{ ucs_fi_port_query_eth_ports_filtered }}"
      when: item.aggregate_port_Id != 0

    - name: Merge FC and Ethernet Port Data
      ansible.builtin.set_fact:
        ucs_fi_port_query_all_ports: "{{ ucs_fi_port_query_fc_ports_filtered + ucs_fi_port_query_eth_ports_filtered }}"

    - name: Initialize `ucs_fi_port_query_filtered_ports` List
      ansible.builtin.set_fact:
        ucs_fi_port_query_filtered_ports: []

    # If `ports` is undefined, return all ports
    - name: Display All Ports if No Filter is Provided
      ansible.builtin.set_fact:
        ucs_fi_port_query_filtered_ports: "{{ ucs_fi_port_query_all_ports }}"
      when: ports is not defined and port_range is not defined

    - name: Initialize `ucs_fi_port_query_ports_fixed` List
      ansible.builtin.set_fact:
        ucs_fi_port_query_ports_fixed: []

    - name: Filter port list
      ansible.builtin.include_tasks: port_list.yml
      when: ports is defined

    - name: Filter port range
      ansible.builtin.include_tasks: port_range.yml
      when: port_range is defined and slot_id is defined

    - name: Filter Ports Based on User Input
      ansible.builtin.set_fact:
        ucs_fi_port_query_filtered_ports: "{{ ucs_fi_port_query_filtered_ports + filtered_ports }}"
      vars:
        filtered_ports: "{{ ucs_fi_port_query_all_ports
                   | selectattr('port_Id', 'equalto', item.port_id | string)
                   | selectattr('slot_Id', 'equalto', item.slot_id)
                   | list }}"
      loop: "{{ ucs_fi_port_query_ports_fixed }}"
      loop_control:
        label: "Filtering Port {{ item.port_id }} in Slot {{ item.slot_id }}"
      when: ucs_fi_port_query_ports_fixed | length > 0

    - name: Append FI port query result to summary
      ansible.builtin.set_fact:
        ucs_fi_port_query_details: "{{ ucs_fi_port_query_details + [ summary_entry ] }}"
      vars:
        summary_entry:
          fi_name: "{{ current_fi }}"
          filtered_ports: "{{ ucs_fi_port_query_filtered_ports }}"
